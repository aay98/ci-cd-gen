name: Publish on Docker Hub and Deploy

on:
  push:
    branches:
      - '*'

jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      # Чекаутим код
      - uses: actions/checkout@master
      # Устанавливаем python нужной версии
      - uses: actions/setup-python@v1
        with:
          python-version: '3.10.12'
          architecture: 'x64'
        # Устанавливаем зависимости
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Run tests
        run: python3 -m pytest -v tests/test_generator.py

  build_and_pub:
    # Если тесты были пройдены успешно
    needs: run_tests
    runs-on: ubuntu-latest
    env:
      LOGIN: ${{ secrets.DOCKER_LOGIN }}
      NAME: ${{ secrets.DOCKER_NAME }}
    steps:
      - name: Login to docker.io
        # Сначала мы логинимся в docker.io
        run:  echo ${{ secrets.DOCKER_PASS }} | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
        # Чекаутим код
      - uses: actions/checkout@master
      - name: Build image
        # Собираем image и называем его так как указано в hub.docker т.е. login/repository:version
        run: docker build -t $LOGIN/$NAME:${GITHUB_REF:11} -f Dockerfile .
      - name: Push image to docker.io
        # Пушим образ в registry
        run: docker push $LOGIN/$NAME:${GITHUB_REF:11}

  deploy:
    # Если мы успешно собрали контейнер и отправили в registry, то делаем хук деплоймент серверу
    # Попробуем готовый экшен curl из маркетплэйса
    needs: build_and_pub
    runs-on: ubuntu-latest
    steps:
    - name: Deploy using ssh
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.DOCKER_LOGIN }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: 22
        script: |
          cd ~/home/aay98/ci-cd-gen
          docker-compose down
          git pull
          git reset --hard HEAD
          docker-compose up --build -d 