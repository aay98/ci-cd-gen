name: Publish on Docker Hub and Deploy

on:
  push:
    branches:
      - '*'

jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      # Чекаутим код
      - uses: actions/checkout@master
      # Устанавливаем python нужной версии
      - uses: actions/setup-python@v1
        with:
          python-version: '3.10.12'
          architecture: 'x64'
        # Устанавливаем зависимости
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Run tests
        run: python3 -m pytest -v tests/test_generator.py

  build_and_pub:
    # Если тесты были пройдены успешно
    needs: run_tests
    runs-on: ubuntu-latest
    env:
      LOGIN: ${{ secrets.DOCKER_LOGIN }}
      NAME: ${{ secrets.DOCKER_NAME }}
    steps:
      - name: Login to docker.io
        # Сначала мы логинимся в docker.io
        run:  echo ${{ secrets.DOCKER_PASS }} | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
        # Чекаутим код
      - uses: actions/checkout@master
      - name: Build image
        # Собираем image и называем его так как указано в hub.docker т.е. login/repository:version
        run: docker-compose build
      - name: Push image to docker.io
        # Пушим образ в registry
        run: docker-compose push $LOGIN/$NAME:${GITHUB_REF:11}

  # deploy:
  #   # Если мы успешно собрали контейнер и отправили в registry, то делаем хук деплоймент серверу
  #   # Попробуем готовый экшен curl из маркетплэйса
  #   needs: [build_and_pub]
  #   runs-on: [ubuntu-latest]
  #   steps:
  #     - name: Set tag to env
  #       run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:11})
  #     - name: Send webhook for deploy
  #       run: "curl --silent --show-error --fail -X POST ${{ secrets.DEPLOYMENT_SERVER }} -H 'Authorization: ${{ secrets.DEPLOYMENT_TOKEN }}' -H 'Content-Type: application/json' -d '{\"owner\": \"${{ secrets.DOCKER_LOGIN }}\", \"repository\": \"${{ secrets.DOCKER_NAME }}\", \"tag\": \"${{ env.RELEASE_VERSION }}\", \"ports\": {\"8080\": 8080}}'"